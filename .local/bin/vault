#!/usr/bin/env bash

set -euETo pipefail
shopt -s inherit_errexit

# shellcheck source="../../Documents/dotfiles/src/_common"
. "$HOME/Documents/dotfiles/src/_common"

BW_RCLONE_CONF=${BW_RCLONE_CONF:-"rclone - config"}

declare -a NON_REMOTE_ACCESS_COMMANDS=(
  config
  unlock
  rclone
)

declare -a LOCATIONS=(
  local
  remote
)

if [ ! -v 1 ]; then
  print-error "COMMAND not specified\n"
elif [[ ! ${NON_REMOTE_ACCESS_COMMANDS[*]} =~ $1 ]] && [[ ! -v 2 ]]; then
  print-error "LOCATION not specified ('local' or 'remote')\n"
elif [[ ! ${NON_REMOTE_ACCESS_COMMANDS[*]} =~ $1 ]] && [[ ! ${LOCATIONS[*]} =~ $2 ]]; then
  print-error "LOCATION unknown: '$2'.  Must be 'local' or 'remote'.\n"
elif [[ ! ${NON_REMOTE_ACCESS_COMMANDS[*]} =~ $1 ]] && [[ ! -v 3 ]]; then
  print-error "VAULT not specified\n"
fi

if [[ "$1" == "unlock" ]]; then
  BW_STATUS="$(bw status | jq -r '.status')"
  if [[ -v BW_SESSION ]] && [[ "$BW_STATUS" == "unlocked" ]]; then
    print-info "Your vault is already unlocked\n"
    exit
  fi
  unset BW_SESSION
  if [[ "$BW_STATUS" == "unauthenticated" ]]; then
    SESSION="$(bw login)"
  elif [[ "$BW_STATUS" == "locked" ]]; then
    SESSION="$(bw unlock)"
  else
    print-error "Unknown vault status: '$BW_STATUS'"
  fi
  BW_SESSION=$(echo "$SESSION" | sed -nr 's/^\$ export BW_SESSION=(.*)$/\1/p')
  if [[ "$(bw status | jq -r '.status')" == "unlocked" ]]; then
    print-error "Failed to unlock your vault\n"
  fi
  print-info "Your vault is unlocked.  Use 'exit' to lock.\n"
  BW_SESSION=$BW_SESSION $SHELL
  BW_SESSION=$BW_SESSION bw lock
  for dir in "$HOME/.local/share/rclone/mnt/"*; do
    if mountpoint "$dir" >/dev/null 2>&1 ; then
        dir_name=${dir%*/}
      if fusermount -u "$dir"; then
        print-info "Unmounted '${dir_name##*/}'\n"
      else
        print-warning "Failed to unmount '${dir_name##*/}'\n"
      fi
    fi
  done
  rm -rf .cache/rclone/vfs/*
  exit
fi

if [[ ${NON_REMOTE_ACCESS_COMMANDS[*]} =~ $1 ]] && [[ "$(bw status | jq -r '.status')" != "unlocked" ]]; then
  print-error "Your vault is not unlocked\n"
fi

# force sync bw once an hour
bw_last_sync="$(date -d "$(bw status | jq -r '.lastSync')" +%s)"
if [[ "$bw_last_sync" -le "$(date -d "1 hour ago" +%s)" ]] || [[ ! -f "$HOME/.config/rclone/rclone.conf" ]]; then
  print-info "Syncing credentials\n"
  mkdir -p "$HOME/.config/rclone"
  bw sync
fi

# test if remote rclone.conf is newer than local rclone.conf
if [[ ! -f "$HOME/.config/rclone/rclone.conf" ]] || [[ "$(date -d "$(bw get item "$BW_RCLONE_CONF" | jq -r '.revisionDate')" +%s)" -gt "$(date -r "$HOME/.config/rclone/rclone.conf" "+%s")" ]] ; then
  # replace local rclone.conf with remote rclone.conf
  print-info "Updating local 'rclone.conf'\n"
  (
    set -x
    # backup local rclone.conf
    mv "$HOME/.config/rclone/rclone.conf" "$HOME/.config/rclone/rclone.local.conf.bk" || true
    # pull remote rclone.conf
    bw get attachment rclone.conf \
      --itemid "$(bw get item "$BW_RCLONE_CONF" | jq -r '.id')" \
      --output "$HOME/.config/rclone/rclone.conf"
    chmod 600 "$HOME/.config/rclone/rclone.conf"
    touch -d "$(date -Rd "$(bw get item "$BW_RCLONE_CONF" | jq -r '.revisionDate')")" "$HOME/.config/rclone/rclone.conf"
  )
fi

NPROC=$(nproc --all)
RCLONE_PASSWORD_COMMAND="echo $(bw get password "$BW_RCLONE_CONF")"
RCLONE_ARGS=(--transfers "$((NPROC * 2))" --checkers "$((NPROC * 2))")

export RCLONE_PASSWORD_COMMAND
export RCLONE_VERBOSE=${RCLONE_VERBOSE:-1}

config() {
  rclone config "$@"
  # test if rclone.conf has been updated locally
  if [[ -f "$HOME/.config/rclone/rclone.conf" ]] && [[ "$(date -d "$(bw get item "$BW_RCLONE_CONF" | jq -r '.revisionDate')" +%s)" -lt "$(date -r "$HOME/.config/rclone/rclone.conf" "+%s")" ]] ; then
    {
      set -x
      # backup remote rclone.conf locally
      bw get attachment rclone.conf \
        --itemid "$(bw get item "$BW_RCLONE_CONF" | jq -r '.id')" \
        --output "$HOME/.config/rclone/rclone.remote.conf.bk"
      chmod 600 "$HOME/.config/rclone/rclone.remote.conf.bk"
      # only update if local is different than remote
      if ! cmp --silent "$HOME/.config/rclone/rclone.conf" "$HOME/.config/rclone/rclone.remote.conf.bk"; then
        print-info "Updating remote 'rclone.conf'\n"
        # delete old backup remote rclone.conf
        if [[ -n "$(bw get item 'rclone - config' | jq -r 'first(.attachments | .[] | select(.fileName=="rclone.remote.conf.bk")) | .id')" ]]; then
          bw delete attachment \
          "$(bw get item 'rclone - config' | jq -r 'first(.attachments | .[] | select(.fileName=="rclone.remote.conf.bk")) | .id')" \
          --itemid "$(bw get item "$BW_RCLONE_CONF" | jq -r '.id')"
        fi
        # push new backup remote rclone.conf
        bw create attachment \
          --file "$HOME/.config/rclone/rclone.remote.conf.bk" \
          --itemid "$(bw get item "$BW_RCLONE_CONF" | jq -r '.id')"

        # delete remote rclone.conf
        bw delete attachment \
          "$(bw get item 'rclone - config' | jq -r 'first(.attachments | .[] | select(.fileName=="rclone.conf")) | .id')" \
          --itemid "$(bw get item "$BW_RCLONE_CONF" | jq -r '.id')"
        # push rclone.conf
        bw create attachment \
          --file "$HOME/.config/rclone/rclone.conf" \
          --itemid "$(bw get item "$BW_RCLONE_CONF" | jq -r '.id')"

        # force sync local and remote timestamps
        bw get item \
          "$(bw get item "$BW_RCLONE_CONF" | jq -r '.id')" |
          bw encode |
          bw edit item "$(bw get item "$BW_RCLONE_CONF" | jq -r '.id')"
        touch -d "$(date -Rd "$(bw get item "$BW_RCLONE_CONF" | jq -r '.revisionDate')")" "$HOME/.config/rclone/rclone.conf"

        # sync
        bw sync
      else
        print-info "\nNo changes to 'rclone.conf'\n"
      fi
    }
  else
    print-info "\nNo changes to 'rclone.conf'\n"
  fi
}

mount() {
  MOUNT_DIR="$HOME/.local/share/rclone/mnt/${2^}$([[ $1 == 'remote' ]] && echo ' (remote)' || echo '')"
  mkdir -p "$MOUNT_DIR"
  # --vfs-cache-mode full \
  rclone mount \
    "${RCLONE_ARGS[@]}" \
    "${@:3}" \
    --progress \
    "crypt-$1-$2:" "$MOUNT_DIR"
  if [[ -d "$MOUNT_DIR/.Trash-$UID" ]]; then
    rm -r "$MOUNT_DIR/.Trash-$UID"
  elif [[ ! -f "$MOUNT_DIR/.Trash-$UID" ]]; then
    touch "$MOUNT_DIR/.Trash-$UID"
  fi
  xdg-open "$MOUNT_DIR"
}

unmount() {
  MOUNT_DIR="$HOME/.local/share/rclone/mnt/${2^}$([[ $1 == 'remote' ]] && echo ' (remote)' || echo '')"
  fusermount -u "${@:3}" "$MOUNT_DIR"
}

check() {
  RCLONE_VERBOSE=0 rclone cryptcheck \
    "${RCLONE_ARGS[@]}" \
    "${@:3}" \
    --differ - -u --progress \
    "crypt-$1-$2:" "crypt-$([[ $1 == 'local' ]] && echo 'remote' || echo 'local')-$2:"
}

copy() {
  dest="$([[ $1 == 'local' ]] && echo 'remote' || echo 'local')"
  print-warning "Copying files from '$1' to '$dest'\n\nPress enter to continue or ^-d to abort"
  read -r
  rclone copy \
    "${RCLONE_ARGS[@]}" \
    "${@:3}" \
    -u --progress \
    "crypt-$1-$2:" "crypt-$dest-$2:"
}

sync() {
  dest="$([[ $1 == 'local' ]] && echo 'remote' || echo 'local')"
  print-warning "Syncing files from '$1' to '$dest'\n\nPress enter to continue or ^-d to abort"
  read -r
  rclone sync \
    "${RCLONE_ARGS[@]}" \
    "${@:3}" \
    -u --progress \
    "crypt-$1-$2:" "crypt-$dest-$2:"
}

show-hidden() {
  vault rclone ls \
    "${RCLONE_ARGS[@]}" \
    "${@:3}" \
    --b2-versions -q \
    "crypt-$1-$2" |
    { grep --color -B1 -P 'v\d{4}-\d{2}-\d{2}-\d{6}-\d{3}(\.[.]*)?' || true; }
}

cleanup-hidden() {
  rclone cleanup \
    "${RCLONE_ARGS[@]}" \
    "${@:3}" \
    --progress \
    "crypt-$1-$2"
}

case $1 in
  config) config "${@:2}";;
  mount) mount "${@:2}";;
  unmount) unmount "${@:2}";;
  check) check "${@:2}";;
  copy) copy "${@:2}";;
  sync) sync "${@:2}";;
  show-hidden) show-hidden "${@:2}";;
  cleanup-hidden) cleanup-hidden "${@:2}";;
  rclone) RCLONE_VERBOSE=0 rclone "$2" "${RCLONE_ARGS[@]}" "${@:3}";;
  *) print-error "Unknown COMMAND: '$1'\n";;
esac
