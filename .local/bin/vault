#!/bin/bash

set -euETo pipefail
shopt -s inherit_errexit

print_error() {
  >&2 echo -e "\n\033[1;31mError: $1\033[0m"
  exit 1
}

declare -a NON_VAULT_COMMANDS=(
  config
  unlock
)

if [ -z "${1:-}" ]; then
  print_error "COMMAND not specified"
fi

if [[ ! ${NON_VAULT_COMMANDS[*]} =~ $1 ]] && [ -z "${2:-}" ]; then
  print_error "VAULT not specified"
fi

if [[ "$1" == "unlock" ]]; then
  if [[ "$(bw status | jq -r '.status')" == "unauthenticated" ]]; then
    SESSION="$(bw login)"
    echo "$SESSION" | sed -nr 's/^\$ export (.*)$/export \1/p'
  fi
  if [[ "$(bw status | jq -r '.status')" == "locked" ]]; then
    SESSION="$(bw unlock) "
    echo "$SESSION" | sed -nr 's/^\$ export (.*)$/export \1/p'
  fi
  exit
fi

if [[ "$(bw status | jq -r '.status')" != "unlocked" ]]; then
  print_error "vault not unlocked"
fi

# sync bw once a day
bw_last_sync="$(date -d "$(bw status | jq -r '.lastSync')" +%s)"
if [ "$bw_last_sync" -le "$(date -d "yesterday" +%s)" ]; then
  bw sync
  bw_rclone_conf_last_revision="$(date -d "$(bw get item 'rclone - config' | jq -r '.revisionDate')" +%s)"
  rclone_conf_last_revision="$(date -r ~/.config/rclone/rclone.conf +%s)"
  # test if rclone.conf has been updated in bw
  if [ ! -f ~/.config/rclone/rclone.conf ] || [ "$bw_rclone_conf_last_revision" -ge "$rclone_conf_last_revision" ] ; then
    # load rclone.conf from bw
    bw get attachment rclone.conf --itemid "$(bw get item 'rclone - config' | jq -r '.id')" --output ~/.config/rclone/rclone.conf
    chmod 600 ~/.config/rclone/rclone.conf
  fi
fi

# echo -en "\npassword: "
# read -sr password
# echo ""

RCLONE_PASSWORD_COMMAND="echo $(bw get password 'rclone - config')"
export RCLONE_PASSWORD_COMMAND
export RCLONE_VERBOSE=1
export RCLONE_STATS=5s
RCLONE_ARGS=(--transfers 32 --progress)

mount-local (){
  mkdir -p ~/.local/share/rclone/mnt/"$1" \
  && rclone mount \
    "${RCLONE_ARGS[@]}" \
    "${@:2}" \
    --daemon \
    --progress \
    --vfs-cache-mode full \
    crypt-"$1": ~/.local/share/rclone/mnt/"$1" \
  && xdg-open ~/.local/share/rclone/mnt/"$1"
}

mount-remote (){
  mkdir -p ~/.local/share/rclone/mnt/b2-"$1" \
  && rclone mount \
    "${RCLONE_ARGS[@]}" \
    "${@:2}" \
    --daemon \
    --progress \
    --vfs-cache-mode full \
    crypt-b2-"$1": ~/.local/share/rclone/mnt/b2-"$1" \
  && xdg-open ~/.local/share/rclone/mnt/b2-"$1"
}

unmount-local() {
  fusermount -u ~/.local/share/rclone/mnt/"$1"
}

unmount-remote() {
  fusermount -u ~/.local/share/rclone/mnt/b2-"$1"
}

force-umount-local() {
  fusermount -uz ~/.local/share/rclone/mnt/"$1"
}

force-umount-remote() {
  fusermount -uz ~/.local/share/rclone/mnt/b2-"$1"
}

check-remote() {
  rclone sync "${RCLONE_ARGS[@]}" -u crypt-b2-"$1": crypt-"$1": --dry-run
}

check-local() {
  rclone sync "${RCLONE_ARGS[@]}" -u crypt-"$1": crypt-b2-"$1": --dry-run
}

pull() {
  rclone sync "${RCLONE_ARGS[@]}" -u b2:"$USER"-b2-"$1" ~/Backups/"${1^}"
}

push() {
  rclone sync "${RCLONE_ARGS[@]}" -u ~/Backups/"${1^}" b2:"$USER"-b2-"$1"
}

copy-from-remote() {
  rclone copy "${RCLONE_ARGS[@]}" -u b2:"$USER"-b2-"$1" ~/Backups/"${1^}"
}

copy-from-local() {
  rclone copy "${RCLONE_ARGS[@]}" -u ~/Backups/"${1^}" b2:"$USER"-b2-"$1"
}

case $1 in
  config) rclone config "${@:2}";;
  mount-local) mount-local "${@:2}";;
  mount-remote) mount-remote "${@:2}";;
  unmount-local) unmount-local "${@:2}";;
  unmount-remote) unmount-remote "${@:2}";;
  force-unmount-local) force-unmount-local "${@:2}";;
  force-unmount-remote) force-unmount-remote "${@:2}";;
  check-remote) check-remote "${@:2}";;
  check-local) check-local "${@:2}";;
  pull) pull "${@:2}";;
  push) push "${@:2}";;
  copy-from-remote) copy-from-remote "${@:2}";;
  copy-from-local) copy-from-local "${@:2}";;
  *) print_error "Unknown COMMAND: '$1'";;
esac

# do_mount() {
#   check_vault "$@"
#   mkdir -p "$HOME/Backups/${1^}"
#   echo -en "\nrclone config password: "
#   read -sr password
#   echo -e "\n\n=> checking no local changes\n"
#   out=$(rclone sync --password-command "echo $password" -u "crypt-$1:" "crypt-b2-$1:" --verbose --dry-run 2>&1 && echo "0" || echo "1")
#   if [[ "${out##*$'\n'}" != "0" ]]; then
#      print_error "command failed\n\n${out%"${out##*$'\n'}"}"
#   fi
#   out=$(echo "$out" | grep Skipped && echo "0" || echo "1")
#   if [[ "${out##*$'\n'}" == "0" ]]; then
#      print_error "unsynced local files\n\n${out%"${out##*$'\n'}"}"
#   fi
#   echo "passed"
#   echo -e "\n=> syncing remote changes\n"
#   rclone sync --password-command "echo $password" -u "b2:$USER-b2-$1" "$HOME/Backups/${1^}" --verbose
#   echo -e "=> mounting: ${1^}"
#   mkdir -p "$HOME/.local/share/rclone/mnt/${1^}" && rclone mount -v \
#     --password-command "echo $password" \
#     --daemon \
#     --progress \
#     --stats 5s \
#     --transfers 32 \
#     --vfs-cache-mode full \
#     "crypt-$1:" "$HOME/.local/share/rclone/mnt/${1^}"
#   xdg-open "$HOME/.local/share/rclone/mnt/${1^}"
# }
#
# do_umount() {
#   check_vault "$@"
#   echo -e "=> unmounting ${1^}\n\npassed"
#   fusermount -u ~/.local/share/rclone/mnt/"${1^}"
# }
#
# do_backup() {
#   check_vault "$@"
#   mkdir -p "$HOME/Backups/${1^}"
#   echo -en "\npassword: "
#   read -sr password
#   echo -e "\n\n=> checking no remote changes\n"
#   out=$(rclone sync --password-command "echo $password" -u "crypt-b2-$1:" "crypt-$1:" --verbose --dry-run 2>&1 && echo "0" || echo "1")
#   if [[ "${out##*$'\n'}" != "0" ]]; then
#      print_error "command failed\n\n${out%"${out##*$'\n'}"}"
#   fi
#   out=$(echo "$out" | grep Skipped && echo "0" || echo "1")
#   if [[ "${out##*$'\n'}" == "0" ]]; then
#      print_error "unsynced remote files\n\n${out%"${out##*$'\n'}"}"
#   fi
#   echo "passed"
#   echo -e "\n=> syncing local changes\n"
#   rclone sync --password-command "echo $password" -u "$HOME/Backups/${1^}" "b2:$USER-b2-$1"  --verbose
# }
