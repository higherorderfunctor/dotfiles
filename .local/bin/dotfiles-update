#!/bin/bash

set -euETo pipefail
shopt -s expand_aliases
shopt -s inherit_errexit

cd "$HOME"

declare -a packages=(
  jq
  rclone
  shellcheck
  tmux
  wl-clipboard
  xclip
  zsh
)

(
  for package in "${packages[@]}"
  do
    if ! dpkg-query -W -f='${Status}' "$package"  | sed -r "s/.*(ok installed).*/\1: $package\n/"; then
      sudo apt-get update && sudo apt-get install -y "${packages[@]}"
      break
    fi
  done
)

PATH=".local/bin:$PATH"
alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'

# dotfiles config --global user.name "Christopher Aubut"
dotfiles config user.email "christopher@aubut.me"
dotfiles config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
dotfiles config --local status.showUntrackedFiles no

set -x

# reset changes to submodules
dotfiles submodule foreach --recursive git reset --hard
dotfiles submodule foreach --recursive git clean -fdx
dotfiles submodule update --init --recursive

# commit this file if changed
dotfiles commit ~/.local/bin/dotfiles-update -m 'chore: dotfiles-update updated' || true

# determine no pending changes that will be lost
dotfiles update-index --refresh
dotfiles diff-index --quiet HEAD -- || \
  echo "ERROR: commit or revert changes or they will be lost"

# pull latest upstream changes to this branch
dotfiles fetch -j8 origin
dotfiles merge --ff --no-edit origin/"$(dotfiles rev-parse --abbrev-ref HEAD)"
dotfiles submodule update --init --recursive

# update each submodule to HEAD of default branch
# shellcheck disable=SC2016
dotfiles submodule foreach 'git checkout $(git rev-parse --abbrev-ref HEAD); git pull origin $(git rev-parse --abbrev-ref HEAD); git submodule update --recursive'

.fzf/install --completion --key-bindings --no-update-rc

dotfiles commit -am 'chore: submodules updated' || true
dotfiles push origin main

## setup terminal
dconf load /org/gnome/terminal/ < ~/.config/gnome-terminal/gnome-terminal.conf
# dconf dump /org/gnome/terminal/ > .config/gnome-terminal/gnome-terminal.conf

#mkdir -p ~/.local/share/fonts
if [ ! -f ~/.local/share/fonts/'DejaVu Sans Mono for Powerline.ttf' ]; then
  curl -fLo ~/.local/share/fonts/'DejaVu Sans Mono for Powerline.ttf' --create-dirs https://github.com/powerline/fonts/raw/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20for%20Powerline.ttf
  fc-cache -f -v
fi

# install bitwarden
if [ ! -f ~/.local/bin/bitwarden ]; then
  curl -fLo ~/.local/bin/bitwarden --create-dirs 'https://func.bitwarden.com/api/dl/?app=desktop&platform=linux'
  chmod u+x ~/.local/bin/bitwarden
fi

curl -fLo ~/.local/bin/bw.zip --create-dirs 'https://func.bitwarden.com/api/dl/?app=cli&platform=linux'
(
  cd ~/.local/bin
  unzip -o bw.zip
  rm bw.zip
  chmod u+x bw
)

# install or upgrade nvim
curl -Lo ~/.local/bin/nvim https://github.com/neovim/neovim/releases/latest/download/nvim.appimage || true
chmod u+x ~/.local/bin/nvim

# install vim-plug
if [ ! -f ~/.local/share/nvim/site/autoload/plug.vim ]; then
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

# upgrade vim-plug
nvim -es -u ~/.config/nvim/init.vim -i NONE -c "PlugUpgrade" -c "qa"

# upgrade plugins
nvim -es -u ~/.config/nvim/init.vim -i NONE -c "PlugUpdate" -c "qa"

# install coc extensions
(
  declare -a coc_extensions=(
    coc-json
    coc-tsserver
  )

  mkdir -p ~/.config/coc/extensions

  cd ~/.config/coc/extensions
  if [ ! -f package.json ]
  then
    echo '{"dependencies":{}}'> package.json
  fi
  npm install "${coc_extensions[@]}" --install-strategy=shallow --ignore-scripts --no-bin-links --no-package-lock --omit=dev
)

# update coc extensions
nvim -es -u ~/.config/nvim/init.vim -i NONE -c "CocUpdateSync" -c "qa"
