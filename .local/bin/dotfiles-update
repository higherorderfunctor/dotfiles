#!/usr/bin/env bash

set -euETo pipefail
shopt -s inherit_errexit
shopt -s expand_aliases

# shellcheck source="../../Documents/dotfiles/src/_common"
. "$HOME/Documents/dotfiles/src/_common"

DOTFILES_SECURE=true

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    -s|--secure)
      DOTFILES_SECURE=true
      shift
      ;;
    -S|--no-secure)
      DOTFILES_SECURE=false
      shift
      ;;
    --*|-*)
      echo "Unknown argument: '$1'"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

export DOTFILES_SECURE

# TODO
# # define command which will be used when "nvim" is set as a merge tool
# [mergetool "nvim"]
#   cmd = nvim -f -c \"Gdiffsplit!\" \"$MERGED\"
# # set "nvim" as tool for merging
# [merge]
#   tool = nvim
# # automatically launch merge tool without displaying a prompt
# [mergetool]
#   prompt = false

# shellcheck source="../../Documents/dotfiles/src/_zsh"
. "$HOME/Documents/dotfiles/src/_zsh"
# shellcheck source="../../Documents/dotfiles/src/_bitwarden_cli"
. "$HOME/Documents/dotfiles/src/_bitwarden_cli"
# shellcheck source="../../Documents/dotfiles/src/_bitwarden"
. "$HOME/Documents/dotfiles/src/_bitwarden"
# shellcheck source="../../Documents/dotfiles/src/_rclone"
. "$HOME/Documents/dotfiles/src/_rclone"
# TODO https://github.com/prettier/vim-prettier for bash?

declare -a ppas=(
  ppa:mooltipass/moolticute
)

declare -a packages=(
  jq
  moolticute
  shellcheck
  tmux
  wl-clipboard
  xclip
  zsh
)

(
  UBUNTU_CODENAME="$(grep -oE "UBUNTU_CODENAME=\S+" < /etc/os-release | cut -d'=' -f2)"
  for ppa in "${ppas[@]}"; do
    if ! add-apt-repository -L | grep -e "${ppa#ppa:}.*$UBUNTU_CODENAME"; then
      sudo add-apt-repository -y "$ppa"
    fi
  done
  for package in "${packages[@]}"; do
    if ! dpkg-query -W -f='${Status}' "$package"  | sed -r "s/.*(ok installed).*/\1: $package\n/"; then
      sudo apt-get update && sudo apt-get install -y "${packages[@]}"
      break
    fi
  done
)

PATH=".local/bin:$PATH"
alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'

dotfiles config --global user.name "Christopher Aubut"
dotfiles config --local user.email "christopher@aubut.me"
dotfiles config --local remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
dotfiles config --local status.showUntrackedFiles no

set -x

# add new dotfiles
dotfiles add "$HOME/Documents/dotfiles" -f

# reset changes to submodules
dotfiles submodule foreach --recursive git reset --hard
dotfiles submodule foreach --recursive git clean -fdx
dotfiles submodule update --init --recursive

# commit this file if changed
dotfiles commit ~/.local/bin/dotfiles-update -m 'chore: dotfiles-update updated' || true

# determine no pending changes that will be lost
dotfiles update-index --refresh
dotfiles diff-index --quiet HEAD -- || \
  echo "ERROR: commit or revert changes or they will be lost"

# pull latest upstream changes to this branch
dotfiles fetch -j8 origin
dotfiles merge --ff --no-edit origin/"$(dotfiles rev-parse --abbrev-ref HEAD)"
dotfiles submodule update --init --recursive

# update each submodule to HEAD of default branch
# shellcheck disable=SC2016
dotfiles submodule foreach 'git checkout $(git rev-parse --abbrev-ref HEAD); git pull origin $(git rev-parse --abbrev-ref HEAD); git submodule update --recursive'

.fzf/install --completion --key-bindings --no-update-rc

dotfiles commit -am 'chore: submodules updated' || true
dotfiles push origin "$(dotfiles rev-parse --abbrev-ref HEAD)"


## gnome-terminal

# install font
if [ ! -f ~/.local/share/fonts/'DejaVu Sans Mono for Powerline.ttf' ]; then
  curl -fLo ~/.local/share/fonts/'DejaVu Sans Mono for Powerline.ttf' --create-dirs https://github.com/powerline/fonts/raw/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20for%20Powerline.ttf
  fc-cache -f -v
fi

# load config
dconf load /org/gnome/terminal/ < ~/.config/gnome-terminal/gnome-terminal.conf

# save config
# dconf dump /org/gnome/terminal/ > .config/gnome-terminal/gnome-terminal.conf


## firefox (snap - yuck need to switch)
curl -fLo "$(find ~/snap/firefox/common/.mozilla/firefox/ -name '*\.default')"/user.js \
  https://github.com/arkenfox/user.js/raw/master/user.js

# install bitwarden
if [ ! -f ~/.local/bin/bitwarden ]; then
  curl -fLo ~/.local/bin/bitwarden --create-dirs 'https://func.bitwarden.com/api/dl/?app=desktop&platform=linux'
  chmod u+x ~/.local/bin/bitwarden
fi

curl -fLo ~/.local/bin/bw.zip --create-dirs 'https://func.bitwarden.com/api/dl/?app=cli&platform=linux'
(
  cd ~/.local/bin
  unzip -o bw.zip
  rm bw.zip
  chmod u+x bw
)

# install or upgrade nvim
curl -Lo ~/.local/bin/nvim https://github.com/neovim/neovim/releases/latest/download/nvim.appimage || true
chmod u+x ~/.local/bin/nvim

# install vim-plug
if [ ! -f ~/.local/share/nvim/site/autoload/plug.vim ]; then
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

# upgrade vim-plug
nvim -es -u ~/.config/nvim/init.vim -i NONE -c "PlugUpgrade" -c "qa"

# upgrade plugins
nvim -es -u ~/.config/nvim/init.vim -i NONE -c "PlugUpdate" -c "qa"

# install coc extensions
(
  declare -a coc_extensions=(
    coc-json
    coc-tsserver
  )

  mkdir -p ~/.config/coc/extensions

  cd ~/.config/coc/extensions
  if [ ! -f package.json ]
  then
    echo '{"dependencies":{}}'> package.json
  fi
  npm install "${coc_extensions[@]}" --install-strategy=shallow --ignore-scripts --no-bin-links --no-package-lock --omit=dev
)

# update coc extensions
nvim -es -u ~/.config/nvim/init.vim -i NONE -c "CocUpdateSync" -c "qa"
